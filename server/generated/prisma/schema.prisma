// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int     @id @default(autoincrement())
  cognitoId         String  @unique
  username          String  @unique
  profilePictureUrl String?
  teamId            Int?

  authoredTasks  Task[]           @relation("TaskAuthor")
  assignedTasks  Task[]           @relation("TaskAssignee")
  taskAssignment TaskAssignment[]
  attachments    Attachment[]
  comments       Comment[]
  teams          Team?            @relation(fields: [teamId], references: [id])
}

model Team {
  id                 Int           @id @default(autoincrement())
  teamName           String        @unique
  productOwnerUserId Int?
  ProductOwnerUserId Int?
  projectTeams       ProjectTeam[]
  users              User[]
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  tasks        Task[]
  projectTeams ProjectTeam[]
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  projectId Int
  teamId    Int
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model Task {
  id    Int    @id @default(autoincrement())
  title String

  description String?
  status      String?
  priority    String?
  tags        String?
  startDate   DateTime?
  dueDate     DateTime?
  points      Int?

  projectId      Int
  authorUserId   Int
  assigneeUserId Int?

  project  Project? @relation(fields: [projectId], references: [id])
  author   User     @relation("TaskAuthor", fields: [authorUserId], references: [id])
  assignee User?    @relation("TaskAssignee", fields: [assigneeUserId], references: [id])

  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
}

model TaskAssignment {
  id     Int @id @default(autoincrement())
  userId Int
  taskId Int

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileUrl      String
  taskId       Int
  fileName     String?
  uploadedById Int

  task       Task @relation(fields: [taskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [id])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId Int

  user      User     @relation(fields: [userId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
}
